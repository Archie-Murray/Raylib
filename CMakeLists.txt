cmake_minimum_required(VERSION 3.24) # FetchContent is available in 3.11+
project(Raylib)

if (APPLE)
  error("MacOS is not supported")
endif()

# Generate compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "") # works
set(CMAKE_CXX_STANDARD 20)

if (WIN32)
  set(RAYLIB_DIR "./raylib-win/")
  set(OS_LIBS "opengl32.lib user32.lib gdi32.lib kernel32.lib shell32.lib winmm.lib")
  if(MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:libmt")
  endif()
else()
  set(RAYLIB_DIR "./raylib-linux/")
  set(OS_LIBS "")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Release")
  if (WIN32)
    set(RAYLIB_LIB "raylib")
  else()
    set(RAYLIB_LIB "libraylib.a")
  endif()
  add_executable(${PROJECT_NAME} src/main_release.cpp)
  target_link_libraries(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}${RAYLIB_DIR}lib/raylib)
  target_link_libraries(${PROJECT_NAME} ${OS_LIBS})
  include_directories(${RAYLIB_DIR}/include/)
else()
  # Set dynamic library locations (I hate windows!)
  if (WIN32)
    set(RAYLIB_SO "raylib.dll")
    set(RAYLIB_LIB "raylibdll.lib")
  else()
    set(RAYLIB_SO "libraylib.so")
    set(RAYLIB_LIB "libraylib.so")
  endif()
  if (NOT EXISTS ${CMAKE_BINARY_DIR}/${RAYLIB_SO}) 
    file(COPY ${RAYLIB_DIR}/lib/${RAYLIB_SO} DESTINATION ${CMAKE_BINARY_DIR})
  endif()
  add_library(game SHARED src/game.cpp)
  add_executable(${PROJECT_NAME} src/main.cpp) 
  target_link_libraries(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}${RAYLIB_DIR}lib/${RAYLIB_LIB})
  target_link_libraries(${PROJECT_NAME} ${OS_LIBS})
  target_link_libraries(game ${CMAKE_SOURCE_DIR}${RAYLIB_DIR}lib/${RAYLIB_LIB})
  target_link_libraries(${PROJECT_NAME} game)
  include_directories(${RAYLIB_DIR}/include/)
endif()
